{"ast":null,"code":"// server.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst User = require('./User');\n// const { message } = require('antd')\nconst app = express();\nconst PORT = 5000;\napp.use(cors());\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://127.0.0.1:27017/foodie', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error('MongoDB connection error:', err));\n\n// Login endpoint\napp.post('/existing', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      username,\n      password\n    });\n    if (user) {\n      res.json({\n        success: true,\n        message: 'Login successful'\n      });\n    } else {\n      res.status(401).json({\n        success: false,\n        message: 'Invalid credentials'\n      });\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error'\n    });\n  }\n});\napp.post('/newuser', async (req, res) => {\n  const {\n    username,\n    password,\n    email,\n    mobile\n  } = req.body;\n  try {\n    const existingUser = await User.findOne({\n      $or: [{\n        username\n      }, {\n        email\n      }, {\n        mobile\n      }]\n    });\n    if (existingUser) {\n      const errorMessage = [];\n      if (existingUser.username === username) {\n        errorMessage.push('Username already in use.');\n      }\n      if (existingUser.email === email) {\n        errorMessage.push('Email already in use.');\n      }\n\n      //todo: Message not visible\n      if (existingUser.mobile === mobile) {\n        errorMessage.push('Mobile already in use.');\n      }\n      return res.status(400).json({\n        success: false,\n        message: errorMessage.join(' ')\n      });\n    }\n\n    // Insert the received login data into the MongoDB database\n    const user = new User({\n      username,\n      password,\n      email,\n      mobile\n    });\n    await user.save();\n    res.json({\n      success: true,\n      message: 'Login data inserted successfully'\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error'\n    });\n  }\n});\n\n// Get all users\napp.get('/users', async (req, res) => {\n  try {\n    const users = await User.find();\n    res.json(users);\n  } catch (error) {\n    console.error('Get users error:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\n\n//get email and mobile from username in loginjs component\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","bodyParser","cors","User","app","PORT","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","post","req","res","username","password","body","user","findOne","success","message","status","email","mobile","existingUser","$or","errorMessage","push","join","save","get","users","find","listen"],"sources":["E:/foodie/src/Pages/Usermenu/Name.js"],"sourcesContent":["// server.js\r\nconst express = require('express')\r\nconst mongoose = require('mongoose')\r\nconst bodyParser = require('body-parser')\r\nconst cors = require('cors')\r\nconst User = require('./User')\r\n// const { message } = require('antd')\r\nconst app = express()\r\nconst PORT = 5000\r\n\r\napp.use(cors())\r\napp.use(bodyParser.json())\r\n\r\n// Connect to MongoDB\r\nmongoose\r\n    .connect('mongodb://127.0.0.1:27017/foodie', {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true,\r\n    })\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch((err) => console.error('MongoDB connection error:', err))\r\n\r\n// Login endpoint\r\napp.post('/existing', async (req, res) => {\r\n    const { username, password } = req.body\r\n    try {\r\n        const user = await User.findOne({ username, password })\r\n        if (user) {\r\n            res.json({ success: true, message: 'Login successful' })\r\n        } else {\r\n            res.status(401).json({ success: false, message: 'Invalid credentials' })\r\n        }\r\n    } catch (error) {\r\n        console.error('Login error:', error)\r\n        res.status(500).json({ success: false, message: 'Server error' })\r\n    }\r\n})\r\n\r\napp.post('/newuser', async (req, res) => {\r\n    const { username, password, email, mobile } = req.body\r\n    try {\r\n        const existingUser = await User.findOne({ $or: [{ username }, { email }, { mobile }] })\r\n\r\n        if (existingUser) {\r\n            const errorMessage = []\r\n\r\n            if (existingUser.username === username) {\r\n                errorMessage.push('Username already in use.')\r\n            }\r\n            if (existingUser.email === email) {\r\n                errorMessage.push('Email already in use.')\r\n            }\r\n\r\n            //todo: Message not visible\r\n            if (existingUser.mobile === mobile) {\r\n                errorMessage.push('Mobile already in use.')\r\n            }\r\n\r\n            return res.status(400).json({ success: false, message: errorMessage.join(' ') })\r\n        }\r\n\r\n        // Insert the received login data into the MongoDB database\r\n        const user = new User({ username, password, email, mobile })\r\n        await user.save()\r\n        res.json({ success: true, message: 'Login data inserted successfully' })\r\n    } catch (error) {\r\n        console.error('Login error:', error)\r\n        res.status(500).json({ success: false, message: 'Server error' })\r\n    }\r\n})\r\n\r\n// Get all users\r\napp.get('/users', async (req, res) => {\r\n    try {\r\n        const users = await User.find()\r\n        res.json(users)\r\n    } catch (error) {\r\n        console.error('Get users error:', error)\r\n        res.status(500).json({ message: 'Internal server error' })\r\n    }\r\n})\r\n\r\n//get email and mobile from username in loginjs component\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on port ${PORT}`)\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}